Res50_edf = Res50
Res50_edf$k = 50000 / Res50$k
names(Res50_edf)[1] = "edf"
results_l_edf %>% mutate(fold = factor(fold)) %>%
ggplot(aes(edf, mse)) +
geom_line(data = . %>% group_by(edf) %>% summarize(mse = mean(mse)), size=2) +
geom_line(data = Res50_edf %>% group_by(edf) %>% summarize(mse = mean(mse)), size=2, color="red")
scale_x_continuous(breaks = seq(3, 50, by=2))
View(i.boot)
View(fit)
?knn.reg
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n.folds,length = n))
ks = seq(3,50,by = 1)
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
fit = knn.reg(select(data_t, x), test=data_eval$x, y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
m = matrix(0, ncol = n.folds+1, nrow = length(ks))
results_w = data.frame(m)
names(results_w) = c("k",paste("fold",seq(1:n.folds)))
results_w$df = ks
results_l = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = knn_eval (
data_t = slice(simData,train),
data_eval = slice(simData,val),
df = ks
) %>%
mutate("fold" = i)
results_w[,i+1] = result$mse
results_l = rbind(results_l,result)
}
data_eval$x
val$x
val
slice(simData,val)$x
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
fit = knn.reg(select(data_t, x), test=data_eval, y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n.folds,length = n))
ks = seq(3,50,by = 1)
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
fit = knn.reg(select(data_t, x), test=data_eval, y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
m = matrix(0, ncol = n.folds+1, nrow = length(ks))
results_w = data.frame(m)
names(results_w) = c("k",paste("fold",seq(1:n.folds)))
results_w$df = ks
results_l = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = knn_eval (
data_t = slice(simData,train),
data_eval = slice(simData,val),
df = ks
) %>%
mutate("fold" = i)
results_w[,i+1] = result$mse
results_l = rbind(results_l,result)
}
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n.folds,length = n))
ks = seq(3,50,by = 1)
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
fit = knn.reg(select(data_t, x), y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
m = matrix(0, ncol = n.folds+1, nrow = length(ks))
results_w = data.frame(m)
names(results_w) = c("k",paste("fold",seq(1:n.folds)))
results_w$df = ks
results_l = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = knn_eval (
data_t = slice(simData,train),
data_eval = slice(simData,val),
df = ks
) %>%
mutate("fold" = i)
results_w[,i+1] = result$mse
results_l = rbind(results_l,result)
}
results_l %>% mutate(fold = factor(fold)) %>%
ggplot(aes(k, mse)) +
#geom_line(aes(color=fold)) +
#geom_point(data=. %>% group_by(fold) %>% slice_min(mse, n=1), color="blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse)), size=2) +
geom_point(data = . %>% group_by(k) %>% summarize(mse = mean(mse)) %>%
slice_min(mse, n=1), size=3, color="red") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse) + sd(mse)), size=2, color = "blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse) - sd(mse)), size=2, color = "blue") +
scale_x_continuous(breaks = seq(3, 50, by=2))
paste("Optimal K:",(results_l %>% group_by(k) %>% summarize(mse = mean(mse)) %>% slice_min(mse, n=1))[1,1])
paste("MSE:",(results_l %>% group_by(k) %>% summarize(mse = mean(mse)) %>% slice_min(mse, n=1))[1,2])
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n.folds,length = n))
ks = seq(3,50,by = 1)
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
fit = knn.reg(select(data_t, x), test = points, y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
m = matrix(0, ncol = n.folds+1, nrow = length(ks))
results_w = data.frame(m)
names(results_w) = c("k",paste("fold",seq(1:n.folds)))
results_w$df = ks
results_l = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = knn_eval (
data_t = slice(simData,train),
data_eval = slice(simData,val),
df = ks
) %>%
mutate("fold" = i)
results_w[,i+1] = result$mse
results_l = rbind(results_l,result)
}
results_l %>% mutate(fold = factor(fold)) %>%
ggplot(aes(k, mse)) +
#geom_line(aes(color=fold)) +
#geom_point(data=. %>% group_by(fold) %>% slice_min(mse, n=1), color="blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse)), size=2) +
geom_point(data = . %>% group_by(k) %>% summarize(mse = mean(mse)) %>%
slice_min(mse, n=1), size=3, color="red") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse) + sd(mse)), size=2, color = "blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse) - sd(mse)), size=2, color = "blue") +
scale_x_continuous(breaks = seq(3, 50, by=2))
paste("Optimal K:",(results_l %>% group_by(k) %>% summarize(mse = mean(mse)) %>% slice_min(mse, n=1))[1,1])
paste("MSE:",(results_l %>% group_by(k) %>% summarize(mse = mean(mse)) %>% slice_min(mse, n=1))[1,2])
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n.folds,length = n))
ks = seq(3,50,by = 1)
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
fit = knn.reg(select(data_t, x), test = NA, y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
m = matrix(0, ncol = n.folds+1, nrow = length(ks))
results_w = data.frame(m)
names(results_w) = c("k",paste("fold",seq(1:n.folds)))
results_w$df = ks
results_l = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = knn_eval (
data_t = slice(simData,train),
data_eval = slice(simData,val),
df = ks
) %>%
mutate("fold" = i)
results_w[,i+1] = result$mse
results_l = rbind(results_l,result)
}
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n.folds,length = n))
ks = seq(3,50,by = 1)
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
fit = knn.reg(select(data_t, x), test = points, y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
m = matrix(0, ncol = n.folds+1, nrow = length(ks))
results_w = data.frame(m)
names(results_w) = c("k",paste("fold",seq(1:n.folds)))
results_w$df = ks
results_l = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = knn_eval (
data_t = slice(simData,train),
data_eval = slice(simData,val),
df = ks
) %>%
mutate("fold" = i)
results_w[,i+1] = result$mse
results_l = rbind(results_l,result)
}
results_l %>% mutate(fold = factor(fold)) %>%
ggplot(aes(k, mse)) +
#geom_line(aes(color=fold)) +
#geom_point(data=. %>% group_by(fold) %>% slice_min(mse, n=1), color="blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse)), size=2) +
geom_point(data = . %>% group_by(k) %>% summarize(mse = mean(mse)) %>%
slice_min(mse, n=1), size=3, color="red") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse) + sd(mse)), size=2, color = "blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse) - sd(mse)), size=2, color = "blue") +
scale_x_continuous(breaks = seq(3, 50, by=2))
paste("Optimal K:",(results_l %>% group_by(k) %>% summarize(mse = mean(mse)) %>% slice_min(mse, n=1))[1,1])
paste("MSE:",(results_l %>% group_by(k) %>% summarize(mse = mean(mse)) %>% slice_min(mse, n=1))[1,2])
points
View(fit)
fit[["pred"]]
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n.folds,length = n))
ks = seq(3,50,by = 1)
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
fit = knn.reg(select(data_t, x), test = rep(data_eval$x,9), y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
m = matrix(0, ncol = n.folds+1, nrow = length(ks))
results_w = data.frame(m)
names(results_w) = c("k",paste("fold",seq(1:n.folds)))
results_w$df = ks
results_l = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = knn_eval (
data_t = slice(simData,train),
data_eval = slice(simData,val),
df = ks
) %>%
mutate("fold" = i)
results_w[,i+1] = result$mse
results_l = rbind(results_l,result)
}
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n.folds,length = n))
ks = seq(3,50,by = 1)
knn_eval <- function(data_t, data_eval, df = seq(3, 15, by=1), kts.bdry = c(-.1, 1.1),test = points) {
MSE = numeric(length(df))
for(i in 1:length(df)) {
#- set tuning parameter value
df.i = df[i]
#- fit with training data (no intercept)
test = data.frame("x" = data_eval$x)
fit = knn.reg(select(data_t, x), test = test, y=data_t$y, k=df[i] )
#- predict on test data
yhat = fit$pred
#- get errors / loss
MSE[i] = mean( (data_eval$y - yhat)**2 )
}
tibble(k=df, mse=MSE)
}
m = matrix(0, ncol = n.folds+1, nrow = length(ks))
results_w = data.frame(m)
names(results_w) = c("k",paste("fold",seq(1:n.folds)))
results_w$df = ks
results_l = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = knn_eval (
data_t = slice(simData,train),
data_eval = slice(simData,val),
df = ks
) %>%
mutate("fold" = i)
results_w[,i+1] = result$mse
results_l = rbind(results_l,result)
}
results_l %>% mutate(fold = factor(fold)) %>%
ggplot(aes(k, mse)) +
#geom_line(aes(color=fold)) +
#geom_point(data=. %>% group_by(fold) %>% slice_min(mse, n=1), color="blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse)), size=2) +
geom_point(data = . %>% group_by(k) %>% summarize(mse = mean(mse)) %>%
slice_min(mse, n=1), size=3, color="red") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse) + sd(mse)), size=2, color = "blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse) - sd(mse)), size=2, color = "blue") +
scale_x_continuous(breaks = seq(3, 50, by=2))
paste("Optimal K:",(results_l %>% group_by(k) %>% summarize(mse = mean(mse)) %>% slice_min(mse, n=1))[1,1])
paste("MSE:",(results_l %>% group_by(k) %>% summarize(mse = mean(mse)) %>% slice_min(mse, n=1))[1,2])
results_l_edf = results_l
results_l_edf$k = length(simData$x / n.folds) / results_l$k
names(results_l_edf)[1] = "edf"
results_l_edf %>% mutate(fold = factor(fold)) %>%
ggplot(aes(edf, mse)) +
geom_line(data = . %>% group_by(edf) %>% summarize(mse = mean(mse)), size=2) +
geom_point(data = . %>% group_by(edf) %>% summarize(mse = mean(mse)) %>%
slice_min(mse, n=1), size=3, color="red") +
geom_line(data = . %>% group_by(edf) %>% summarize(mse = mean(mse) + sd(mse)), size=2, color = "blue") +
geom_line(data = . %>% group_by(edf) %>% summarize(mse = mean(mse) - sd(mse)), size=2, color = "blue") +
scale_x_continuous(breaks = seq(3, 50, by=2))
set.seed(223)
simData50k = sim(50000)
Res50 = knn_eval(simData50k, simData50k,df = ks)
optimal = match(min(Res50$mse),Res50$mse)
paste("Optimal k:", Res50$k[optimal])
paste("Optimal edf:",50000 / Res50$k[optimal])
paste("Optimal MSE:",Res50$mse[optimal])
results_l %>% mutate(fold = factor(fold)) %>%
ggplot(aes(k, mse)) +
geom_line(data = . %>% group_by(k) %>% summarize(mse = mean(mse)), size=2) +
geom_line(data = Res50 %>% group_by(k) %>% summarize(mse = mean(mse)), size=2, color="red")
scale_x_continuous(breaks = seq(3, 50, by=2))
Res50_edf = Res50
Res50_edf$k = 50000 / Res50$k
names(Res50_edf)[1] = "edf"
results_l_edf %>% mutate(fold = factor(fold)) %>%
ggplot(aes(edf, mse)) +
geom_line(data = . %>% group_by(edf) %>% summarize(mse = mean(mse)), size=2) +
geom_line(data = Res50_edf %>% group_by(edf) %>% summarize(mse = mean(mse)), size=2, color="red")
scale_x_continuous(breaks = seq(3, 50, by=2))
library(tidyverse)
library(stringr)
name.basics = read.delim('~/School/4th Year/DS4002/DS_Upload/name.basics.tsv', sep = "\t", header = TRUE)
title.akas = read.delim('~/School/4th Year/DS4002/DS_Upload/title.akas.tsv', sep = "\t", header = TRUE)
title.basics = read.delim('~/School/4th Year/DS4002/DS_Upload/title.basics.tsv', sep = "\t", header = TRUE)
title.crew = read.delim('~/School/4th Year/DS4002/DS_Upload/title.crew.tsv', sep = "\t", header = TRUE)
title.episode = read.delim('~/School/4th Year/DS4002/DS_Upload/title.episode.tsv', sep = "\t", header = TRUE)
title.principals= read.delim('~/School/4th Year/DS4002/DS_Upload/title.principals.tsv', sep = "\t", header = TRUE)
title.ratings = read.delim('~/School/4th Year/DS4002/DS_Upload/title.ratings.tsv', sep = "\t", header = TRUE)
#Filter title.basics down to just titles we have scripts of
title.basics2 = title.basics[title.basics$titleType == "movie",]
scripts = c(list.files(path = "~/School/4th Year/DS4002/Github/DS4002_Proj1/scripts"))
scripts = gsub(".txt","",scripts)
title.basics3 = title.basics2
title.basics3$primaryTitle = tolower(gsub(" ","-",title.basics3$primaryTitle))
title.basics3$originalTitle = tolower(gsub(" ","-",title.basics3$originalTitle))
have.scripts = title.basics3$primaryTitle %in% scripts
have.scripts2 = title.basics3$originalTitle %in% scripts
have.scripts.f = have.scripts & have.scripts2
title.basics4 = title.basics3[have.scripts.f,]
#Filter out duplicate items
movieDupes = title.basics4$primaryTitle[duplicated(title.basics4$primaryTitle)]
#List of duplicate film titles for manual selection
tbsh = title.basics4[title.basics4$primaryTitle %in% movieDupes,]
#Checks number of duplicates to look through
test = tbsh[!duplicated(tbsh$primaryTitle),]
#Dataframe of movie and release date
#TODO manually change release date to correct date for duplicate title films
scriptKey = data.frame(title.basics4$primaryTitle,title.basics4$startYear)
scriptKey = scriptKey[!duplicated(scriptKey[,1]),]
#Armageddon 1998
#Assassins 1995
#
#write.csv(file = "titleBasics_Scripts.csv",  title.basics4)
View(scriptKey)
View(title.basics4)
View(title.ratings)
?merge
title.basics.rate = merge(title.basics4,title.ratings, by.x = tconst, by.y = tconst)
title.basics.rate = merge(title.basics4,title.ratings, intersect(title.basics4$tconst,title.ratings$tconst))
title.basics.rate = merge(title.basics4,title.ratings, by.x = tconst, by.y = tconst)
title.basics.rate = merge(title.basics4,title.ratings, by.x = "tconst", by.y = "tconst")
View(title.basics.rate)
#Dataframe of movie and release date
#TODO manually change release date to correct date for duplicate title films
scriptKey = data.frame(title.basics4$primaryTitle,title.basics4$startYear)
scriptKey = scriptKey[order(-title.basics4.startYear,)]
#Dataframe of movie and release date
#TODO manually change release date to correct date for duplicate title films
scriptKey = data.frame(title.basics4$primaryTitle,title.basics4$startYear)
scriptKey = scriptKey[order(-scriptKey$title.basics4.startYear,)]
scriptKey = scriptKey[order(-scriptKey$title.basics4.startYear),]
scriptKey = scriptKey[order(scriptKey$title.basics4.startYear),]
View(scriptKey)
View(scriptKey)
scriptKey = scriptKey[order(-scriptKey$title.basics4.startYear),]
?order
scriptKey = scriptKey[order(scriptKey$title.basics4.startYear, decreasing = TRUE),]
View(scriptKey)
scriptKey = scriptKey[!duplicated(scriptKey[,1]),]
#------------------------------------------------------------------------------
###Erroneous titles will be manually fixed in a text editor and re-uploaded with correct dates
write.csv(file = "scriptKey.csv",scriptKey)
setwd("~/School/4th Year/DS4002/Github/DS4002_Proj1")
#------------------------------------------------------------------------------
###Erroneous titles will be manually fixed in a text editor and re-uploaded with correct dates
write.csv(file = "scriptKey.csv",scriptKey)
#Dataframe of movie and release date
#TODO manually change release date to correct date for duplicate title films
scriptKey = data.frame(title.basics4$primaryTitle,title.basics4$startYear,title.basics.rate$numVotes)
#Dataframe of movie and release date
#TODO manually change release date to correct date for duplicate title films
scriptKey = data.frame(title.basics.rate$primaryTitle,title.basics.rate$startYear,title.basics.rate$numVotes)
scriptKey = scriptKey[order(scriptKey$title.basics4.startYear, decreasing = TRUE),]
scriptKey = scriptKey[order(scriptKey$title.basics.rate.startYear, decreasing = TRUE),]
scriptKey = scriptKey[!duplicated(scriptKey[,1]),]
#------------------------------------------------------------------------------
###Erroneous titles will be manually fixed in a text editor and re-uploaded with correct dates
write.csv(file = "scriptKey.csv",scriptKey)
#Dataframe of movie and release date
#TODO manually change release date to correct date for duplicate title films
scriptKey = data.frame(title.basics.rate$primaryTitle,title.basics.rate$startYear,title.basics.rate$numVotes)
scriptKey = scriptKey[order(scriptKey$title.basics.rate.numVotes, decreasing = TRUE),]
scriptKey = scriptKey[!duplicated(scriptKey[,1]),]
#------------------------------------------------------------------------------
###Erroneous titles will be manually fixed in a text editor and re-uploaded with correct dates
write.csv(file = "scriptKey.csv",scriptKey)
View(name.basics)
View(title.basics3)
sum(title.basics3$primaryTitle == "mary-shelly's-frankenstein")
sum(title.basics3$primaryTitle == "mary-shellys-frankenstein")
scriptKey2 = read.csv("scriptKey.csv", header = TRUE)
?filter
?match
match("legend",title.basics4)
match("legend",title.basics4$primaryTitle)
View(scriptKey2)
scriptKey2 %>% mutate("unid" = paste(title.basics.rate.primaryTitle,title.basics.rate.startYear))
View(scriptKey2)
scriptKey3 = scriptKey2 %>% mutate("unid" = paste(title.basics.rate.primaryTitle,title.basics.rate.startYear))
title.basics4 = title.basics4 %>% mutate("unid" = paste(primaryTitle,startYear))
title.basics.red = title.basics4[title.basics4$unid %in% scriptKey3$unid,]
View(title.basics.red)
write.csv(file="titleBasicsReduced.csv",title.basics.red)
