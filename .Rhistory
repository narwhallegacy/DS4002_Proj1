ub = c(ub,ci[2])
}
lb = as.numeric(lb)
ub = as.numeric(ub)
ci95 = data.frame("lower bound" = lb, "upper bound" = ub)
length(preds$`M 1`)
lb = c()
ub = c()
for (i in 1:length(preds$`M 1`)) {
ci = quantile(preds[i,], probs = c(.025,.975))
lb = c(lb,ci[1])
ub = c(ub,ci[2])
}
lb = as.numeric(lb)
ub = as.numeric(ub)
ci95 = data.frame("lower bound" = lb, "upper bound" = ub)
View(ci95)
ci_fit = as_tibble(ci_fit) %>% bind_cols(points) %>% pivot_longer(-x,names_to="bounds",values_to="y")
ci_fit = as_tibble(ci95) %>% bind_cols(points) %>% pivot_longer(-x,names_to="bounds",values_to="y")
View(ci_fit)
ggplot(simData, aes(x,y)) + geom_point() + geom_line(data=data_fit, aes(group=simulation), colour = "blue", alpha = .05) + geom_line(data=ci_fit, aes(group=simulation), colour = "red", alpha = 1) + ylim(-2.5,12.5)
View(ci_fit)
ggplot(simData, aes(x,y)) + geom_point() + geom_line(data=data_fit, aes(group=simulation), colour = "blue", alpha = .05) + geom_line(data=ci_fit, aes(group=bounds), colour = "red", alpha = 1) + ylim(-2.5,12.5)
lb = c()
ub = c()
for (i in 1:length(preds$`M 1`)) {
mu = mean(preds[i,])
sigma = sd(preds[i,])
lb = c(lb,mu + simga*qnorm(.025))
ub = c(lb,mu + simga*qnorm(.975))
}
lb = c()
ub = c()
for (i in 1:length(preds$`M 1`)) {
mu = mean(preds[i,])
sigma = sd(preds[i,])
lb = c(lb,mu + simga*qnorm(.025))
ub = c(lb,mu + simga*qnorm(.975))
}
lb = c()
ub = c()
for (i in 1:length(preds$`M 1`)) {
mu = mean(preds[i,])
sigma = sd(preds[i,])
lb = c(lb,mu + sigma*qnorm(.025))
ub = c(lb,mu + sigma*qnorm(.975))
}
lb = as.numeric(lb)
ub = as.numeric(ub)
ci95 = data.frame("lower bound" = lb, "upper bound" = ub)
lb = c()
ub = c()
for (i in 1:length(preds$`M 1`)) {
mu = mean(preds[i,])
sigma = sd(preds[i,])
lb = c(lb,mu + sigma*qnorm(.025))
ub = c(ub,mu + sigma*qnorm(.975))
}
lb = as.numeric(lb)
ub = as.numeric(ub)
ci95 = data.frame("lower bound" = lb, "upper bound" = ub)
ci_fit = as_tibble(ci95) %>% bind_cols(points) %>% pivot_longer(-x,names_to="bounds",values_to="y")
ggplot(simData, aes(x,y)) + geom_point() + geom_line(data=data_fit, aes(group=simulation), colour = "blue", alpha = .05) + geom_line(data=ci_fit, aes(group=bounds), colour = "red", alpha = 1) + ylim(-2.5,12.5)
View(ci95)
View(ci95)
qnorm(.025)
qnorm(.975)
mean(preds[1,])
preds[1,]
lb = c()
ub = c()
for (i in 1:length(preds$`M 1`)) {
mu = mean(as.numeric(preds[i,]))
sigma = sd(as.numeric(preds[i,]))
lb = c(lb,mu + sigma*qnorm(.025))
ub = c(ub,mu + sigma*qnorm(.975))
}
lb = as.numeric(lb)
ub = as.numeric(ub)
ci95 = data.frame("lower bound" = lb, "upper bound" = ub)
ci_fit = as_tibble(ci95) %>% bind_cols(points) %>% pivot_longer(-x,names_to="bounds",values_to="y")
ggplot(simData, aes(x,y)) + geom_point() + geom_line(data=data_fit, aes(group=simulation), colour = "blue", alpha = .05) + geom_line(data=ci_fit, aes(group=bounds), colour = "red", alpha = 1) + ylim(-2.5,12.5)
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n,length = n))
results = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = sp_eval (
data_fit = slice(data_train,train),
data_eval = slice(data_train,val),
df = seq(3,50,1)
) %>%
mutate (fold = i, n.val)
results = bind_rows(results, result)
}
??sp_eval
data.dir = 'https://mdporter.github.io/SYS6018/data/' # data directory
library(R6018)     # functions for SYS-6018
library(tidyverse) # functions for data manipulation
source(system.file("config/hw_config.R", package="R6018")) # knitr settings
options(dplyr.summarise.inform = FALSE)  # ignore dplyr message about grouping
data.dir = 'https://mdporter.github.io/SYS6018/data/' # data directory
library(R6018)     # functions for SYS-6018
library(tidyverse) # functions for data manipulation
n = nrow(simData)
n.folds = 10
set.seed(221)
fold = sample(rep(1:n,length = n))
results = tibble()
for (i in 1:n.folds) {
val = which(fold == i)
train = which(fold != i)
n.val = length(val)
result = sp_eval (
data_fit = slice(data_train,train),
data_eval = slice(data_train,val),
df = seq(3,50,1)
) %>%
mutate (fold = i, n.val)
results = bind_rows(results, result)
}
??R6018
setwd("~/School/4th Year/DS4002/Github/DS4002_Proj1")
title.ratings = read.delim('~/School/4th Year/DS4002/DS_Upload/title.ratings.tsv', sep = "\t", header = TRUE)
title.basics.red = title.basics.red = read.csv("titleBasicsReduced.csv", header=TRUE)
View(title.basics.red)
title.basics.red = title.basics.red = read.csv("titleBasicsReduced.csv", header=TRUE)[2:10,]
title.basics.red = title.basics.red = read.csv("titleBasicsReduced.csv", header=TRUE)[,2:10]
View(title.basics.red)
title.basics = read.delim('~/School/4th Year/DS4002/DS_Upload/title.basics.tsv', sep = "\t", header = TRUE)
View(title.ratings)
View(title.basics)
#Filter title.basics down to just titles we have scripts of
title.basics2 = title.basics[title.basics$titleType == "movie",]
scripts = c(list.files(path = "~/School/4th Year/DS4002/Github/DS4002_Proj1/scripts"))
scripts = gsub(".txt","",scripts)
title.basics3 = title.basics2
title.basics3$primaryTitle = tolower(gsub(" ","-",title.basics3$primaryTitle))
title.basics3$originalTitle = tolower(gsub(" ","-",title.basics3$originalTitle))
have.scripts = title.basics3$primaryTitle %in% scripts
have.scripts2 = title.basics3$originalTitle %in% scripts
have.scripts.f = have.scripts & have.scripts2
title.basics4 = title.basics3[have.scripts.f,]
match("mary-shelley's-frankenstein",title.basics3$primaryTitle)
View(title.basics.red)
title.basics.red[1,] = title.basics3[index,]
index = match("mary-shelley's-frankenstein",title.basics3$primaryTitle)
title.basics.red[1,] = title.basics3[index,]
View(title.basics.red)
write.csv(file="titleBasicsReduced.csv",title.basics.red)
title.basics.red = title.basics.red = read.csv("titleBasicsReduced.csv", header=TRUE)[,2:10]
View(title.basics.red)
title.basics.red = merge(title.basics.red,title.ratings, by.x = tconst, by.y = tconst)
title.basics.red = merge(title.basics.red,title.ratings, by.x = "tconst", by.y = "tconst")
View(title.basics.red)
ggplot(data = title.basics.red) + geom_point(aes(x=startYear,y=averageRating)) + xlab("Release Year") + ylab("Average IMDb Rating")
#EDA
library(tidyverse)
ggplot(data = title.basics.red) + geom_point(aes(x=startYear,y=averageRating)) + xlab("Release Year") + ylab("Average IMDb Rating")
?split
?strsplit
strsplit("drama,horror", ",")
?repeated
genres = c()
for (i in 1:nrows(title.basics.red)) {
movieGenres = split(title.basics.red$genres[i],",")
genres = c(genres,movieGenres)
}
?nrows
for (i in 1:length(title.basics.red$genres)) {
movieGenres = split(title.basics.red$genres[i],",")
genres = c(genres,movieGenres)
}
genres = genres[-duplicated(genres)]
View(genres)
movieGenres = split(title.basics.red$genres[1],",")
split(title.basics.red$genres[1],",")
split(as.character(title.basics.red$genres[1]),",")
strsplit(as.character(title.basics.red$genres[1]),",")
strsplit(title.basics.red$genres[1],",")
genres = c()
for (i in 1:length(title.basics.red$genres)) {
movieGenres = strsplit(title.basics.red$genres[i],",")
genres = c(genres,movieGenres)
}
genres = genres[-duplicated(genres)]
View(genres)
View(movieGenres)
genres = c()
for (i in 1:length(title.basics.red$genres)) {
movieGenres = strsplit(title.basics.red$genres[i],",")
genres = c(genres,movieGenres$Value)
}
genres = genres[-duplicated(genres)]
View(movieGenres)
movieGenres$Value
movieGenres[1]
as.vector(movieGenres[1])
c("hello",as.vector(movieGenres[1]))
str.split(title.basics.red$genres,",")
strsplit(title.basics.red$genres,",")
title.basics.red$genres = strsplit(title.basics.red$genres,",")
View(title.basics.red)
"Drama" %in% title.basics.red
"Drama" %in% title.basics.red[1]
?unlist
unlist(genres)
genres = c()
for (i in 1:length(title.basics.red$genres)) {
movieGenres = strsplit(title.basics.red$genres[i],",")
genres = c(genres,movieGenres$Value)
}
title.basics.red = title.basics.red = read.csv("titleBasicsReduced.csv", header=TRUE)[,2:10]
title.basics.red = merge(title.basics.red,title.ratings, by.x = "tconst", by.y = "tconst")
ggplot(data = title.basics.red) + geom_point(aes(x=startYear,y=averageRating)) + xlab("Release Year") + ylab("Average IMDb Rating")
genres = c()
for (i in 1:length(title.basics.red$genres)) {
movieGenres = strsplit(title.basics.red$genres[i],",")
genres = c(genres,movieGenres$Value)
}
genres = genres[-duplicated(genres)]
View(movieGenres)
genres = c()
for (i in 1:length(title.basics.red$genres)) {
movieGenres = strsplit(title.basics.red$genres[i],",")
genres = c(genres,movieGenres)
}
genres = genres[-duplicated(genres)]
unlist(genres)
genres = unlist(genres)
genres = genres[-duplicated(genres)]
genres
genres = c()
for (i in 1:length(title.basics.red$genres)) {
movieGenres = strsplit(title.basics.red$genres[i],",")
genres = c(genres,movieGenres)
}
genres = unlist(genres)
duplicated(genres)
genres[duplicated(genres)]
genres[!duplicated(genres)]
genres = genres[!duplicated(genres)]
genres
View(title.basics.red)
?grepl
testset = title.basics.red
for (i in 1:length(genres)) {
testset = testset %>% mutate(paste("Is",genres[i],sep="") = grepl(genres[i],title.basics.red$genres,fixed=TRUE))
}
for (i in 1:length(genres)) {
testset %>% mutate(paste("Is",genres[i],sep="") = grepl(genres[i],title.basics.red$genres,fixed=TRUE))
}
?paste
?mutate
testset = title.basics.red
for (i in 1:length(genres)) {
testset %>% mutate(paste("Is",genres[i],sep=""))
}
View(testset)
testset = title.basics.red
for (i in 1:length(genres)) {
testset = testset %>% mutate(paste("Is",genres[i],sep=""))
}
View(testset)
titles = title.basics.red
titles %>% mutate ("isDrama" = grepl("Drama",title.basics.red$genres, fixed = TRUE))
View(titles)
titles = titles %>% mutate ("isDrama" = grepl("Drama",title.basics.red$genres, fixed = TRUE))
genres
titles = title.basics.red
titles = titles %>% mutate ("isDrama" = grepl("Drama",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isSport" = grepl("Sport",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isRomance" = grepl("Romance",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isComedy" = grepl("Comedy",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isAdventure" = grepl("Adventure",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isHistory" = grepl("History",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isAction" = grepl("Action",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isBiography" = grepl("Biography",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isCrime" = grepl("Crime",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isMystery" = grepl("Mystery",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isWar" = grepl("War",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isSci-Fi" = grepl("Sci-Fi",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isFantasy" = grepl("Fantasy",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isThriller" = grepl("Thriller",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isHorror" = grepl("Horror",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isAnimation" = grepl("Animation",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isMusic" = grepl("Music",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isFamily" = grepl("Family",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isMusical" = grepl("Musical",title.basics.red$genres, fixed = TRUE))
View(titles)
genreModel = lm(averageRating ~ isDrama + isSport + isRomance + isComedy+ isAdventure + isHistory + isAction + isBiography + isCrime +
isMystery + isWar + isSci-Fi + isFantasy + isThriller + isHorror + isAnimation + isMusic + isFamily + isMusical)
genreModel = lm(averageRating ~ isDrama + isSport + isRomance + isComedy+ isAdventure + isHistory + isAction + isBiography + isCrime +
isMystery + isWar + isSci-Fi + isFantasy + isThriller + isHorror + isAnimation + isMusic + isFamily + isMusical, data=titles)
genreModel = lm(averageRating ~ isDrama + isSport + isRomance + isComedy+ isAdventure + isHistory + isAction + isBiography + isCrime +
isMystery + isWar + 'isSci-Fi' + isFantasy + isThriller + isHorror + isAnimation + isMusic + isFamily + isMusical, data=titles)
genreModel = lm(averageRating ~ isDrama + isSport + isRomance + isComedy+ isAdventure + isHistory + isAction + isBiography + isCrime +
isMystery + isWar + `isSci-Fi` + isFantasy + isThriller + isHorror + isAnimation + isMusic + isFamily + isMusical, data=titles)
summary(genreModel)
View(title.basics.red)
title.basics = read.delim('~/School/4th Year/DS4002/DS_Upload/title.basics.tsv', sep = "\t", header = TRUE)
title.ratings = read.delim('~/School/4th Year/DS4002/DS_Upload/title.ratings.tsv', sep = "\t", header = TRUE)
#Filter title.basics down to just titles we have scripts of
title.basics2 = title.basics[title.basics$titleType == "movie",]
scripts = c(list.files(path = "~/School/4th Year/DS4002/Github/DS4002_Proj1/scripts"))
scripts = gsub(".txt","",scripts)
title.basics3 = title.basics2
title.basics3$primaryTitle = tolower(gsub(" ","-",title.basics3$primaryTitle))
title.basics3$originalTitle = tolower(gsub(" ","-",title.basics3$originalTitle))
have.scripts = title.basics3$primaryTitle %in% scripts
have.scripts2 = title.basics3$originalTitle %in% scripts
have.scripts.f = have.scripts & have.scripts2
title.basics4 = title.basics3[have.scripts.f,]
typeof(title.basics3$startYear[1])
bigMovies.basics = title.basics3[as.numeric(title.basics3$startYear)>=1960,]
as.numeric(title.basics3$startYear)
title.basics.red = title.basics.red = read.csv("titleBasicsReduced.csv", header=TRUE)[,2:10]
title.basics.red = merge(title.basics.red,title.ratings, by.x = "tconst", by.y = "tconst")
write.csv(file = "scriptBasicRating.csv",title.basics.red)
#Obtain random sample of movies after 1960 w/ at least 7000 reviews
bigMovies.basics = title.basics3
bigMovies.basics$startYear = as.numeric(title.basics3$startYear)
bigMovies.basics = bigMovies.basics[!is.na(bigMovies.basics),]
#Obtain random sample of movies after 1960 w/ at least 7000 reviews
bigMovies.basics = title.basics3
bigMovies.basics$startYear = as.numeric(title.basics3$startYear)
bigMovies.basics = bigMovies.basics[!is.na(bigMovies.basics$startYear),]
bigMovies.basics = bigMovies.basics[bigMovies.basics$startYear>=1960,]
bigMovies.basics = merge(bigMovies.basics,title.ratings, by.x = "tconst", by.y = "tconst")
bigMovies.basics = bigMovies.basics[bigMovies.basics$numVotes >= 7000,]
write.csv(file = "AllBigMovies.csv",bigMovies.basics)
?seq
allBigMovies = read.csv("AllBigMovies.csv",header = TRUE)
View(allBigMovies)
allBigMovies = read.csv("AllBigMovies.csv",header = TRUE)[,2:11]
View(allBigMovies)
allBigMovies = read.csv("AllBigMovies.csv",header = TRUE)[,2:12]
allBigMovies = read.csv("AllBigMovies.csv",header = TRUE)
allBigMovies = read.csv("AllBigMovies.csv",header = TRUE)[,2:12]
View(allBigMovies)
index.test = allBigMovies[fold=10,]
index.test = allBigMovies[fold==10,]
fold = sample(rep(1:10,length = n))
fold = sample(rep(1:10,length = length(allBigMovies$tconst)))
index.test = allBigMovies[fold==10,]
index.train = allBigMovies[!fold==10,]
test.basic = allBigMovies[fold==10,]
train.basic = allBigMovies[!fold==10,]
genres = c()
for (i in 1:length(allBigMovies$genres)) {
movieGenres = strsplit(allBigMovies$genres[i],",")
genres = c(genres,movieGenres)
}
genres = unlist(genres)
genres = genres[!duplicated(genres)]
genres
titles = train.basic
titles = titles %>% mutate ("isDrama" = grepl("Drama",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isSport" = grepl("Sport",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isRomance" = grepl("Romance",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isComedy" = grepl("Comedy",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isAdventure" = grepl("Adventure",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isHistory" = grepl("History",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isAction" = grepl("Action",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isBiography" = grepl("Biography",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isCrime" = grepl("Crime",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isMystery" = grepl("Mystery",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isWar" = grepl("War",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isSci-Fi" = grepl("Sci-Fi",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isFantasy" = grepl("Fantasy",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isThriller" = grepl("Thriller",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isHorror" = grepl("Horror",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isAnimation" = grepl("Animation",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isMusic" = grepl("Music",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isFamily" = grepl("Family",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isMusical" = grepl("Musical",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isDocumentary" = grepl("Documentary",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isNews" = grepl("News",title.basics.red$genres, fixed = TRUE)) %>%
mutate ("isWestern" = grepl("Western",title.basics.red$genres, fixed = TRUE))
titles = train.basic
titles = titles %>% mutate ("isDrama" = grepl("Drama",train.basic$genres, fixed = TRUE)) %>%
mutate ("isSport" = grepl("Sport",train.basic$genres, fixed = TRUE)) %>%
mutate ("isRomance" = grepl("Romance",train.basic$genres, fixed = TRUE)) %>%
mutate ("isComedy" = grepl("Comedy",train.basic$genres, fixed = TRUE)) %>%
mutate ("isAdventure" = grepl("Adventure",train.basic$genres, fixed = TRUE)) %>%
mutate ("isHistory" = grepl("History",train.basic$genres, fixed = TRUE)) %>%
mutate ("isAction" = grepl("Action",train.basic$genres, fixed = TRUE)) %>%
mutate ("isBiography" = grepl("Biography",train.basic$genres, fixed = TRUE)) %>%
mutate ("isCrime" = grepl("Crime",train.basic$genres, fixed = TRUE)) %>%
mutate ("isMystery" = grepl("Mystery",train.basic$genres, fixed = TRUE)) %>%
mutate ("isWar" = grepl("War",train.basic$genres, fixed = TRUE)) %>%
mutate ("isSci-Fi" = grepl("Sci-Fi",train.basic$genres, fixed = TRUE)) %>%
mutate ("isFantasy" = grepl("Fantasy",train.basic$genres, fixed = TRUE)) %>%
mutate ("isThriller" = grepl("Thriller",train.basic$genres, fixed = TRUE)) %>%
mutate ("isHorror" = grepl("Horror",train.basic$genres, fixed = TRUE)) %>%
mutate ("isAnimation" = grepl("Animation",train.basic$genres, fixed = TRUE)) %>%
mutate ("isMusic" = grepl("Music",train.basic$genres, fixed = TRUE)) %>%
mutate ("isFamily" = grepl("Family",train.basic$genres, fixed = TRUE)) %>%
mutate ("isMusical" = grepl("Musical",train.basic$genres, fixed = TRUE)) %>%
mutate ("isDocumentary" = grepl("Documentary",train.basic$genres, fixed = TRUE)) %>%
mutate ("isNews" = grepl("News",train.basic$genres, fixed = TRUE)) %>%
mutate ("isWestern" = grepl("Western",train.basic$genres, fixed = TRUE))
genreModel = lm(averageRating ~ isDrama + isSport + isRomance + isComedy+ isAdventure + isHistory + isAction + isBiography + isCrime +
isMystery + isWar + `isSci-Fi` + isFantasy + isThriller + isHorror + isAnimation + isMusic + isFamily + isMusical, data=titles)
genreModel = lm(averageRating ~ isDrama + isSport + isRomance + isComedy+ isAdventure + isHistory + isAction + isBiography + isCrime +
isMystery + isWar + `isSci-Fi` + isFantasy + isThriller + isHorror + isAnimation + isMusic + isFamily + isMusical + isDocumentary +
isNews + isWestern, data=titles)
summary(genreModel)
#Release Year & Rating
ggplot(data = train.basic) + geom_point(aes(x=startYear,y=averageRating)) + xlab("Release Year") + ylab("Average IMDb Rating")
#Release Year & Rating
ggplot(data = train.basic) + geom_histogram(aes(x=startYear,y=averageRating)) + xlab("Release Year") + ylab("Average IMDb Rating")
#Release Year & Rating
ggplot(data = train.basic) + geom_point(aes(x=startYear,y=averageRating)) + xlab("Release Year") + ylab("Average IMDb Rating")
#Runtime & Rating
ggplot(data = train.basic) + geom_point(aes(x=runtime,y=averageRating)) + xlab("Release Year") + ylab("Average IMDb Rating")
#Runtime & Rating
ggplot(data = train.basic) + geom_point(aes(x=runtimeMinutes,y=averageRating)) + xlab("Release Year") + ylab("Average IMDb Rating")
#Runtime & Rating
ggplot(data = train.basic) + geom_point(aes(x=runtimeMinutes,y=averageRating)) + xlab("RuntimeMinutes") + ylab("Average IMDb Rating")
#NumReviews & Rating
ggplot(data = train.basic) + geom_point(aes(x=numVotes,y=averageRating)) + xlab("Number of IMDb User Reviews") + ylab("Average IMDb Rating")
title.crew = read.delim('~/School/4th Year/DS4002/DS_Upload/title.crew.tsv', sep = "\t", header = TRUE)
View(title.crew)
title.principals= read.delim('~/School/4th Year/DS4002/DS_Upload/title.principals.tsv', sep = "\t", header = TRUE)
View(title.basics3)
title.principals= read.delim('~/School/4th Year/DS4002/DS_Upload/title.principals.tsv', sep = "\t", header = TRUE)
title.principals= read.delim('~/School/4th Year/DS4002/DS_Upload/title.principals.tsv', sep = "\t", header = TRUE)
title.crew = read.delim('~/School/4th Year/DS4002/DS_Upload/title.crew.tsv', sep = "\t", header = TRUE)
View(title.crew)
name.basics = read.delim('~/School/4th Year/DS4002/DS_Upload/name.basics.tsv', sep = "\t", header = TRUE)
title.basics = read.delim('~/School/4th Year/DS4002/DS_Upload/title.basics.tsv', sep = "\t", header = TRUE)
title.crew = read.delim('~/School/4th Year/DS4002/DS_Upload/title.crew.tsv', sep = "\t", header = TRUE)
title.ratings = read.delim('~/School/4th Year/DS4002/DS_Upload/title.ratings.tsv', sep = "\t", header = TRUE)
#Filter title.basics down to just titles we have scripts of
title.basics2 = title.basics[title.basics$titleType == "movie",]
scripts = c(list.files(path = "~/School/4th Year/DS4002/Github/DS4002_Proj1/scripts"))
scripts = gsub(".txt","",scripts)
title.basics3 = title.basics2
title.basics3$primaryTitle = tolower(gsub(" ","-",title.basics3$primaryTitle))
title.basics3$originalTitle = tolower(gsub(" ","-",title.basics3$originalTitle))
have.scripts = title.basics3$primaryTitle %in% scripts
have.scripts2 = title.basics3$originalTitle %in% scripts
have.scripts.f = have.scripts & have.scripts2
title.basics4 = title.basics3[have.scripts.f,]
#Obtain random sample of movies after 1960 w/ at least 7000 reviews
bigMovies.basics = title.basics3
bigMovies.basics$startYear = as.numeric(title.basics3$startYear)
bigMovies.basics = bigMovies.basics[!is.na(bigMovies.basics$startYear),]
bigMovies.basics = bigMovies.basics[bigMovies.basics$startYear>=1960,]
bigMovies.basics = merge(bigMovies.basics,title.ratings, by.x = "tconst", by.y = "tconst")
bigMovies.basics = merge(bigMovies.basics,title.crew, by.x = "tconst", by.y = "tconst")
bigMovies.basics = bigMovies.basics[bigMovies.basics$numVotes >= 7000,]
write.csv(file = "AllBigMovies.csv",bigMovies.basics)
title.ratings = read.delim('~/School/4th Year/DS4002/DS_Upload/title.ratings.tsv', sep = "\t", header = TRUE)
title.basics.red = title.basics.red = read.csv("titleBasicsReduced.csv", header=TRUE)[,2:10]
allBigMovies = read.csv("AllBigMovies.csv",header = TRUE)[,2:12]
#------------------------------------------------------------------------------
#SingleRandomSample
set.seed(4002)
fold = sample(rep(1:10,length = length(allBigMovies$tconst)))
test.basic = allBigMovies[fold==10,]
train.basic = allBigMovies[!fold==10,]
View(train.basic)
allBigMovies = read.csv("AllBigMovies.csv",header = TRUE)
allBigMovies = read.csv("AllBigMovies.csv",header = TRUE)[,2:14]
View(allBigMovies)
#Create list of people ONLY who appear in bigMovies.basics
people = c()
for (i in 1:length(allBigMovies$genres)) {
directors = strsplit(allBigMovies$directors[i],",")
writers = strsplit(allBigMovies$writers[i],",")
people = c(people,directors,writers)
}
people = unlist(people)
#Create list of people ONLY who appear in bigMovies.basics
people = c()
for (i in 1:length(allBigMovies$genres)) {
directors = strsplit(allBigMovies$directors[i],",")
writers = strsplit(allBigMovies$writers[i],",")
people = c(people,directors,writers)
}
#Create list of people ONLY who appear in bigMovies.basics
people = c()
for (i in 1:length(allBigMovies$genres)) {
directors = strsplit(allBigMovies$directors[i],",")
writers = strsplit(allBigMovies$writers[i],",")
people = c(people,directors)
}
people = unlist(people)
#Create list of people ONLY who appear in bigMovies.basics
directors = c()
writers = c()
for (i in 1:length(allBigMovies$genres)) {
director = strsplit(allBigMovies$directors[i],",")
writer = strsplit(allBigMovies$writers[i],",")
directors = c(directors,director)
writers = c(writers, writer)
}
directors = unlist(directors)
writers = unlist(writers)
people = c(directors,writers)
people = people[!duplicated(people)]
name.basics.2 = name.basics[name.basics$nconst %in% people]
name.basics.2 = name.basics[name.basics$nconst %in% people,]
View(name.basics.2)
write.csv(file = "name.basics.red.csv",name.basics.2)
people = read.csv("name.basics.red.csv",header = TRUE)[,2:7]
