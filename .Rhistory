}
sim.MSE.rep = data.frame("rep" = c(1:100), "Linear" = l.MSE.rep, "Quadratic" = q.MSE.rep, "Cubic" = c.MSE.rep)
ggplot(data=sim.MSE.rep) + geom_histogram(aes(x = Linear, color = "blue")) + geom_histogram(aes(x = Quadratic, color = "purple")) + geom_histogram(aes(x = Cubic, color = "red"))
ggplot(data=sim.MSE.rep) + geom_histogram(aes(x = Linear, fill = "blue")) + geom_histogram(aes(x = Quadratic, fill = "purple")) + geom_histogram(aes(x = Cubic, fill = "red"))
l.models = c()
q.models = c()
c.models = c()
#b
for (i in 1:100) {
repsim = sim1(100,3)
l.models = c(l.models,lm(y ~ x, data=repsim))
q.models = c(q.models,lm(y~ poly(x, 2), data=repsim))
c.models = c(c.models,lm(y~ poly(x, 3), data=repsim))
}
c.models[1]
c.models[1]$coefficients
View(c.models)
View(c.models)
seq(1,6,2)
set.seed(613)
l.models = c()
q.models = c()
c.models = c()
#b
for (i in 1:100) {
repsim = sim1(100,3)
l.models = c(l.models,lm(y ~ x, data=repsim))
q.models = c(q.models,lm(y~ poly(x, 2), data=repsim))
c.models = c(c.models,lm(y~ poly(x, 3), data=repsim))
}
l.MSE.rep = c()
q.MSE.rep = c()
c.MSE.rep = c()
for (i in seq(1,length(l.models,12))) {
l.er = abs(test10k$y - (l.models[i]$coefficients[1] + l.models[i]$coefficients[2]*test10k$x))
q.er = abs(test10k$y - (q.models[i]$coefficients[1] + q.models[i]$coefficients[2]*test10k$x + q.models[i]$coefficients[3]*(test10k$x**2)))
c.er = abs(test10k$y - (c.models[i]$coefficients[1] + c.models[i]$coefficients[2]*test10k$x + c.models[i]$coefficients[3]*(test10k$x**2) + c.models[i]$coefficients[4]*(test10k$x**3)))
l.MSE.rep = c(l.MSE.rep,sum(l.er**2)/length(test10k$x))
q.MSE.rep = c(q.MSE.rep,sum(q.er**2)/length(test10k$x))
c.MSE.rep = c(c.MSE.rep,sum(c.er**2)/length(test10k$x))
}
for (i in seq(1,length(l.models),12)) {
l.er = abs(test10k$y - (l.models[i]$coefficients[1] + l.models[i]$coefficients[2]*test10k$x))
q.er = abs(test10k$y - (q.models[i]$coefficients[1] + q.models[i]$coefficients[2]*test10k$x + q.models[i]$coefficients[3]*(test10k$x**2)))
c.er = abs(test10k$y - (c.models[i]$coefficients[1] + c.models[i]$coefficients[2]*test10k$x + c.models[i]$coefficients[3]*(test10k$x**2) + c.models[i]$coefficients[4]*(test10k$x**3)))
l.MSE.rep = c(l.MSE.rep,sum(l.er**2)/length(test10k$x))
q.MSE.rep = c(q.MSE.rep,sum(q.er**2)/length(test10k$x))
c.MSE.rep = c(c.MSE.rep,sum(c.er**2)/length(test10k$x))
}
sim.MSE.rep = data.frame("rep" = c(1:100), "Linear" = l.MSE.rep, "Quadratic" = q.MSE.rep, "Cubic" = c.MSE.rep)
ggplot(data=sim.MSE.rep) + geom_histogram(aes(x = Linear, fill = "Linear")) + geom_histogram(aes(x = Quadratic, fill = "Quadratic")) + geom_histogram(aes(x = Cubic, fill = "Cubic"))
l.MSE.rep
q.MSE.rep
c.MSE.rep
?geom_kernel
ggplot(data=sim.MSE.rep, aes(x=MSE, fill=ModelType)) + geom_density()
#sim.MSE.rep = data.frame("rep" = c(1:100), "Linear" = l.MSE.rep, "Quadratic" = q.MSE.rep, "Cubic" = c.MSE.rep)
sim.MSE.rep = data.frame("ModelType" = c("Linear"*100,"Quadratic"*100, "Cubic"*100), "MSE" = c(l.MSE.rep,q.MSE.rep,c.MSE.rep))
c("a"*100)
c("a")*100
"a"*100
rep("a",5)
#sim.MSE.rep = data.frame("rep" = c(1:100), "Linear" = l.MSE.rep, "Quadratic" = q.MSE.rep, "Cubic" = c.MSE.rep)
sim.MSE.rep = data.frame("ModelType" = c(rep("Linear",100),rep("Quadratic",100), rep("Cubic",100)), "MSE" = c(l.MSE.rep,q.MSE.rep,c.MSE.rep))
View(sim.MSE.rep)
View(sim.MSE.rep)
ggplot(data=sim.MSE.rep, aes(x=MSE, fill=ModelType)) + geom_density()
ggplot(data=sim.MSE.rep, aes(x=MSE, fill=ModelType, alpha=.7)) + geom_density()
ggplot(data=sim.MSE.rep, aes(x=MSE, fill=ModelType)) + geom_density(aes(alpha=.7))
ggplot(data=sim.MSE.rep, aes(x=MSE, fill=ModelType)) + geom_density(alpha=.7)
sim.MSE.rep.w = data.frame("rep" = c(1:100), "Linear" = l.MSE.rep, "Quadratic" = q.MSE.rep, "Cubic" = c.MSE.rep)
sim.MSE.rep.l = data.frame("ModelType" = c(rep("Linear",100),rep("Quadratic",100), rep("Cubic",100)), "MSE" = c(l.MSE.rep,q.MSE.rep,c.MSE.rep))
?geom_function
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=(-1 + (.5*x) + (.2*(x**2))))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=(-1 + (.5*x) + (.2*(x**2))))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(aes(fun=(-1 + (.5*x) + (.2*(x**2)))))
?rlang
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal)
eVal = as_function(~ -1 + (.5*x) + (.2*(x**2)))
rlang::eVal = as_function(~ -1 + (.5*x) + (.2*(x**2)))
eVal = rlang::as_function(~ -1 + (.5*x) + (.2*(x**2)))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal)
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(inherit.aes = TRUE, fun=eVal)
dnorm
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(inherit.aes = TRUE, fun=eVal, colour="red")
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal, colour="red")
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal, aes(x = x) colour="red")
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal, aes(x = x), colour="red")
?rlang::as_function
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal(x), colour="red")
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal(simData$x), colour="red")
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal(y), colour="red")
eVal = rlang::as_function(~ -1 + (.5*.x) + (.2*(.x**2)))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal, colour="red")
eVal = rlang::as_function(~ -1 + (.5*.x) + (.2*(.x**2)) + 1.5)
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=eVal, colour="red")
l.func = rlang::as_function(l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
l.func = rlang::as_function(l.model$coefficients[1] + l.model$coefficients[2]*.x)
eVal = rlang::as_function(~ -1 + (.5*.x) + (.2*(.x**2)) + 1.5)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple") + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
l.model = lm(y ~ x, data=simData)
q.model = lm(y~ poly(x, 2), data=simData)
c.model = lm(y~ poly(x, 3), data=simData)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple") + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
summary(q.model)
view(q.model)
View(q.model)
summary(l.model)
q.model$coefficients[1]
q.model = lm(y~ x + (x^2), data=simData)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple") + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
q.model = lm(y~ x + simData$x**2, data=simData)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple") + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
q.model = lm(y~ poly(x,2), data=simData)
c.model = lm(y~ poly(x, 3), data=simData)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple") + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
l.model = lm(y ~ poly(x,1), data=simData)
q.model = lm(y~ poly(x,2), data=simData)
c.model = lm(y~ poly(x, 3), data=simData)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple") + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
poly(simData$x)
View(poly(simData$x))
View(poly(simData$x),2)
View(poly(simData$x,2)
)
l.model = lm(y ~ poly(x,1, raw=TRUE), data=simData)
q.model = lm(y~ poly(x,2), data=simData)
c.model = lm(y~ poly(x, 3), data=simData)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple") + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
l.model = lm(y ~ poly(x,1, raw=TRUE), data=simData)
q.model = lm(y~ poly(x,2, raw=TRUE), data=simData)
c.model = lm(y~ poly(x, 3, raw=TRUE), data=simData)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple") + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
#TODO: add key and model lines
#model$coefficient[1] is intercept, [2] is 1st order term, etc
set.seed(612)
test10k = sim1(10000,3)
l.er = c()
q.er = c()
c.er = c()
l.er = abs(test10k$y - (l.model$coefficients[1] + l.model$coefficients[2]*test10k$x))
q.er = abs(test10k$y - (q.model$coefficients[1] + q.model$coefficients[2]*test10k$x + q.model$coefficients[3]*(test10k$x**2)))
c.er = abs(test10k$y - (c.model$coefficients[1] + c.model$coefficients[2]*test10k$x + c.model$coefficients[3]*(test10k$x**2) + c.model$coefficients[4]*(test10k$x**3)))
l.MSE = sum(l.er**2)/length(test10k$x)
q.MSE = sum(q.er**2)/length(test10k$x)
c.MSE = sum(c.er**2)/length(test10k$x)
models.mse = data.frame("Model" = c("Linear", "Quadratic", "Cubic"), "MSE" = c(l.MSE,q.MSE,c.MSE))
models.mse
set.seed(613)
l.models = c()
q.models = c()
c.models = c()
#b
for (i in 1:100) {
repsim = sim1(100,3)
l.models = c(l.models,lm(y ~ poly(x, 1, raw = TRUE), data=repsim))
q.models = c(q.models,lm(y~ poly(x, 2, raw = TRUE), data=repsim))
c.models = c(c.models,lm(y~ poly(x, 3, raw = TRUE), data=repsim))
}
l.MSE.rep = c()
q.MSE.rep = c()
c.MSE.rep = c()
for (i in seq(1,length(l.models),12)) {
l.er = abs(test10k$y - (l.models[i]$coefficients[1] + l.models[i]$coefficients[2]*test10k$x))
q.er = abs(test10k$y - (q.models[i]$coefficients[1] + q.models[i]$coefficients[2]*test10k$x + q.models[i]$coefficients[3]*(test10k$x**2)))
c.er = abs(test10k$y - (c.models[i]$coefficients[1] + c.models[i]$coefficients[2]*test10k$x + c.models[i]$coefficients[3]*(test10k$x**2) + c.models[i]$coefficients[4]*(test10k$x**3)))
l.MSE.rep = c(l.MSE.rep,sum(l.er**2)/length(test10k$x))
q.MSE.rep = c(q.MSE.rep,sum(q.er**2)/length(test10k$x))
c.MSE.rep = c(c.MSE.rep,sum(c.er**2)/length(test10k$x))
}
sim.MSE.rep.w = data.frame("rep" = c(1:100), "Linear" = l.MSE.rep, "Quadratic" = q.MSE.rep, "Cubic" = c.MSE.rep)
sim.MSE.rep.l = data.frame("ModelType" = c(rep("Linear",100),rep("Quadratic",100), rep("Cubic",100)), "MSE" = c(l.MSE.rep,q.MSE.rep,c.MSE.rep))
#ggplot(data=sim.MSE.rep) + geom_histogram(aes(x = Linear, fill = "Linear")) + geom_histogram(aes(x = Quadratic, fill = "Quadratic")) + geom_histogram(aes(x = Cubic, fill = "Cubic"))
ggplot(data=sim.MSE.rep.l, aes(x=MSE, fill=ModelType)) + geom_density(alpha=.7)
l.best = 0
q.best = 0
c.best = 0
for (i in length(sim.MSE.rep.w$rep)) {
distance.l = abs(3-sim.MSE.rep.w$Linear)
distance.q = abs(3-sim.MSE.rep.w$Quadratic)
distance.c = abs(3-sim.MSE.rep.w$Cubic)
if ((dinstance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((dinstance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
}
l.best = 0
q.best = 0
c.best = 0
distance.l = 0
distance.q = 0
distance.c = 0
for (i in length(sim.MSE.rep.w$rep)) {
distance.l = abs(3-sim.MSE.rep.w$Linear)
distance.q = abs(3-sim.MSE.rep.w$Quadratic)
distance.c = abs(3-sim.MSE.rep.w$Cubic)
if ((dinstance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((dinstance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
}
l.best = 0
q.best = 0
c.best = 0
for (i in length(sim.MSE.rep.w$rep)) {
distance.l = abs(3-sim.MSE.rep.w$Linear)
distance.q = abs(3-sim.MSE.rep.w$Quadratic)
distance.c = abs(3-sim.MSE.rep.w$Cubic)
if ((distance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((dinstance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
}
l.best = 0
q.best = 0
c.best = 0
for (i in length(sim.MSE.rep.w$rep)) {
distance.l = abs(3-sim.MSE.rep.w$Linear)
distance.q = abs(3-sim.MSE.rep.w$Quadratic)
distance.c = abs(3-sim.MSE.rep.w$Cubic)
if ((distance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((distance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
}
data.frame("model" = c("Linear","Quadratic","Cubic"), "Best Count" = c(l.best,q.best,c.best))
l.best = 0
q.best = 0
c.best = 0
for (i in length(sim.MSE.rep.w$rep)) {
distance.l = abs(3-sim.MSE.rep.w$Linear)
distance.q = abs(3-sim.MSE.rep.w$Quadratic)
distance.c = abs(3-sim.MSE.rep.w$Cubic)
if ((distance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((distance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
print(i)
}
data.frame("model" = c("Linear","Quadratic","Cubic"), "Best Count" = c(l.best,q.best,c.best))
l.best = 0
q.best = 0
c.best = 0
for (i in length(sim.MSE.rep.w$rep)) {
distance.l = abs(.75-sim.MSE.rep.w$Linear)
distance.q = abs(.75-sim.MSE.rep.w$Quadratic)
distance.c = abs(.75-sim.MSE.rep.w$Cubic)
if ((distance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((distance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
print(i)
}
data.frame("model" = c("Linear","Quadratic","Cubic"), "Best Count" = c(l.best,q.best,c.best))
l.best = 0
q.best = 0
c.best = 0
for (i in c(1:length(sim.MSE.rep.w$rep))) {
distance.l = abs(.75-sim.MSE.rep.w$Linear)
distance.q = abs(.75-sim.MSE.rep.w$Quadratic)
distance.c = abs(.75-sim.MSE.rep.w$Cubic)
if ((distance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((distance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
print(i)
}
data.frame("model" = c("Linear","Quadratic","Cubic"), "Best Count" = c(l.best,q.best,c.best))
l.best = 0
q.best = 0
c.best = 0
for (i in c(1:length(sim.MSE.rep.w$rep))) {
distance.l = abs(.75-sim.MSE.rep.w$Linear[i])
distance.q = abs(.75-sim.MSE.rep.w$Quadratic[i])
distance.c = abs(.75-sim.MSE.rep.w$Cubic[i])
if ((distance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((distance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
print(i)
}
data.frame("model" = c("Linear","Quadratic","Cubic"), "Best Count" = c(l.best,q.best,c.best))
set.seed(613)
l.models = c()
q.models = c()
c.models = c()
#b
for (i in 1:100) {
repsim = sim1(100,2)
l.models = c(l.models,lm(y ~ poly(x, 1, raw = TRUE), data=repsim))
q.models = c(q.models,lm(y~ poly(x, 2, raw = TRUE), data=repsim))
c.models = c(c.models,lm(y~ poly(x, 3, raw = TRUE), data=repsim))
}
l.MSE.rep = c()
q.MSE.rep = c()
c.MSE.rep = c()
test10k.2 = sim1(10000,2)
for (i in seq(1,length(l.models),12)) {
l.er = abs(test10k.2.2$y - (l.models[i]$coefficients[1] + l.models[i]$coefficients[2]*test10k.2$x))
q.er = abs(test10k.2$y - (q.models[i]$coefficients[1] + q.models[i]$coefficients[2]*test10k.2$x + q.models[i]$coefficients[3]*(test10k.2$x**2)))
c.er = abs(test10k.2$y - (c.models[i]$coefficients[1] + c.models[i]$coefficients[2]*test10k.2$x + c.models[i]$coefficients[3]*(test10k.2$x**2) + c.models[i]$coefficients[4]*(test10k.2$x**3)))
l.MSE.rep = c(l.MSE.rep,sum(l.er**2)/length(test10k.2$x))
q.MSE.rep = c(q.MSE.rep,sum(q.er**2)/length(test10k.2$x))
c.MSE.rep = c(c.MSE.rep,sum(c.er**2)/length(test10k.2$x))
}
set.seed(613)
l.models = c()
q.models = c()
c.models = c()
#b
for (i in 1:100) {
repsim = sim1(100,2)
l.models = c(l.models,lm(y ~ poly(x, 1, raw = TRUE), data=repsim))
q.models = c(q.models,lm(y~ poly(x, 2, raw = TRUE), data=repsim))
c.models = c(c.models,lm(y~ poly(x, 3, raw = TRUE), data=repsim))
}
l.MSE.rep = c()
q.MSE.rep = c()
c.MSE.rep = c()
test10k.2 = sim1(10000,2)
for (i in seq(1,length(l.models),12)) {
l.er = abs(test10k.2$y - (l.models[i]$coefficients[1] + l.models[i]$coefficients[2]*test10k.2$x))
q.er = abs(test10k.2$y - (q.models[i]$coefficients[1] + q.models[i]$coefficients[2]*test10k.2$x + q.models[i]$coefficients[3]*(test10k.2$x**2)))
c.er = abs(test10k.2$y - (c.models[i]$coefficients[1] + c.models[i]$coefficients[2]*test10k.2$x + c.models[i]$coefficients[3]*(test10k.2$x**2) + c.models[i]$coefficients[4]*(test10k.2$x**3)))
l.MSE.rep = c(l.MSE.rep,sum(l.er**2)/length(test10k.2$x))
q.MSE.rep = c(q.MSE.rep,sum(q.er**2)/length(test10k.2$x))
c.MSE.rep = c(c.MSE.rep,sum(c.er**2)/length(test10k.2$x))
}
sim.MSE.rep.w = data.frame("rep" = c(1:100), "Linear" = l.MSE.rep, "Quadratic" = q.MSE.rep, "Cubic" = c.MSE.rep)
sim.MSE.rep.l = data.frame("ModelType" = c(rep("Linear",100),rep("Quadratic",100), rep("Cubic",100)), "MSE" = c(l.MSE.rep,q.MSE.rep,c.MSE.rep))
#ggplot(data=sim.MSE.rep) + geom_histogram(aes(x = Linear, fill = "Linear")) + geom_histogram(aes(x = Quadratic, fill = "Quadratic")) + geom_histogram(aes(x = Cubic, fill = "Cubic"))
ggplot(data=sim.MSE.rep.l, aes(x=MSE, fill=ModelType)) + geom_density(alpha=.7)
l.best = 0
q.best = 0
c.best = 0
for (i in c(1:length(sim.MSE.rep.w$rep))) {
distance.l = abs(.5-sim.MSE.rep.w$Linear[i])
distance.q = abs(.5-sim.MSE.rep.w$Quadratic[i])
distance.c = abs(.5-sim.MSE.rep.w$Cubic[i])
if ((distance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((distance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
print(i)
}
data.frame("model" = c("Linear","Quadratic","Cubic"), "Best Count" = c(l.best,q.best,c.best))
set.seed(613)
l.models = c()
q.models = c()
c.models = c()
#b
for (i in 1:100) {
repsim = sim1(300,4)
l.models = c(l.models,lm(y ~ poly(x, 1, raw = TRUE), data=repsim))
q.models = c(q.models,lm(y~ poly(x, 2, raw = TRUE), data=repsim))
c.models = c(c.models,lm(y~ poly(x, 3, raw = TRUE), data=repsim))
}
l.MSE.rep = c()
q.MSE.rep = c()
c.MSE.rep = c()
test10k.3 = sim1(10000,4)
for (i in seq(1,length(l.models),12)) {
l.er = abs(test10k.3.2$y - (l.models[i]$coefficients[1] + l.models[i]$coefficients[2]*test10k.3.2$x))
q.er = abs(test10k.3.2$y - (q.models[i]$coefficients[1] + q.models[i]$coefficients[2]*test10k.3.2$x + q.models[i]$coefficients[3]*(test10k.3.2$x**2)))
c.er = abs(test10k.3.2$y - (c.models[i]$coefficients[1] + c.models[i]$coefficients[2]*test10k.3.2$x + c.models[i]$coefficients[3]*(test10k.3.2$x**2) + c.models[i]$coefficients[4]*(test10k.3.2$x**3)))
l.MSE.rep = c(l.MSE.rep,sum(l.er**2)/length(test10k.3.2$x))
q.MSE.rep = c(q.MSE.rep,sum(q.er**2)/length(test10k.3.2$x))
c.MSE.rep = c(c.MSE.rep,sum(c.er**2)/length(test10k.3.2$x))
}
set.seed(613)
l.models = c()
q.models = c()
c.models = c()
#b
for (i in 1:100) {
repsim = sim1(300,4)
l.models = c(l.models,lm(y ~ poly(x, 1, raw = TRUE), data=repsim))
q.models = c(q.models,lm(y~ poly(x, 2, raw = TRUE), data=repsim))
c.models = c(c.models,lm(y~ poly(x, 3, raw = TRUE), data=repsim))
}
l.MSE.rep = c()
q.MSE.rep = c()
c.MSE.rep = c()
test10k.2 = sim1(10000,4)
for (i in seq(1,length(l.models),12)) {
l.er = abs(test10k.2$y - (l.models[i]$coefficients[1] + l.models[i]$coefficients[2]*test10k.2$x))
q.er = abs(test10k.2$y - (q.models[i]$coefficients[1] + q.models[i]$coefficients[2]*test10k.2$x + q.models[i]$coefficients[3]*(test10k.2$x**2)))
c.er = abs(test10k.2$y - (c.models[i]$coefficients[1] + c.models[i]$coefficients[2]*test10k.2$x + c.models[i]$coefficients[3]*(test10k.2$x**2) + c.models[i]$coefficients[4]*(test10k.2$x**3)))
l.MSE.rep = c(l.MSE.rep,sum(l.er**2)/length(test10k.2$x))
q.MSE.rep = c(q.MSE.rep,sum(q.er**2)/length(test10k.2$x))
c.MSE.rep = c(c.MSE.rep,sum(c.er**2)/length(test10k.2$x))
}
sim.MSE.rep.w = data.frame("rep" = c(1:100), "Linear" = l.MSE.rep, "Quadratic" = q.MSE.rep, "Cubic" = c.MSE.rep)
sim.MSE.rep.l = data.frame("ModelType" = c(rep("Linear",100),rep("Quadratic",100), rep("Cubic",100)), "MSE" = c(l.MSE.rep,q.MSE.rep,c.MSE.rep))
#ggplot(data=sim.MSE.rep) + geom_histogram(aes(x = Linear, fill = "Linear")) + geom_histogram(aes(x = Quadratic, fill = "Quadratic")) + geom_histogram(aes(x = Cubic, fill = "Cubic"))
l.best = 0
q.best = 0
c.best = 0
for (i in c(1:length(sim.MSE.rep.w$rep))) {
distance.l = abs(.5-sim.MSE.rep.w$Linear[i])
distance.q = abs(.5-sim.MSE.rep.w$Quadratic[i])
distance.c = abs(.5-sim.MSE.rep.w$Cubic[i])
if ((distance.l <= distance.q) && (distance.l <= distance.c)){
l.best = l.best + 1
} else if ((distance.q <= distance.l) && (distance.q <= distance.c)){
q.best = q.best + 1
} else {
c.best = c.best + 1
}
}
data.frame("model" = c("Linear","Quadratic","Cubic"), "Best Count" = c(l.best,q.best,c.best))
l.model = lm(y ~ poly(x,1, raw=TRUE), data=simData)
q.model = lm(y~ poly(x,2, raw=TRUE), data=simData)
c.model = lm(y~ poly(x, 3, raw=TRUE), data=simData)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, color = "purple", aes(Model = "Linear")) + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
#TODO: add key and model lines
#model$coefficient[1] is intercept, [2] is 1st order term, etc
l.model = lm(y ~ poly(x,1, raw=TRUE), data=simData)
q.model = lm(y~ poly(x,2, raw=TRUE), data=simData)
c.model = lm(y~ poly(x, 3, raw=TRUE), data=simData)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, aes(color = "Linear")) + geom_function(fun = q.func, color = "blue") + geom_function(fun = c.func, color = "green")
#TODO: add key and model lines
#model$coefficient[1] is intercept, [2] is 1st order term, etc
l.model = lm(y ~ poly(x,1, raw=TRUE), data=simData)
q.model = lm(y~ poly(x,2, raw=TRUE), data=simData)
c.model = lm(y~ poly(x, 3, raw=TRUE), data=simData)
l.func = rlang::as_function(~ l.model$coefficients[1] + l.model$coefficients[2]*.x)
q.func = rlang::as_function(~ q.model$coefficients[1] + q.model$coefficients[2]*.x + q.model$coefficients[3]*(.x**2))
c.func = rlang::as_function(~ c.model$coefficients[1] + c.model$coefficients[2]*.x + c.model$coefficients[3]*(.x**2) + c.model$coefficients[4]*(.x**3))
ggplot(data = simData, aes(x = x, y = y)) + geom_point() + geom_function(fun=l.func, aes(color = "Linear")) + geom_function(fun = q.func, aes(color = "Quadratic")) + geom_function(fun = c.func, aes(color = "Cubic"))
#TODO: add key and model lines
#model$coefficient[1] is intercept, [2] is 1st order term, etc
?cbind
title.basic.ratings = cbind(title.basics4, title.ratings)
title.basics4 = read.csv("titleBasics_Scripts.csv")
setwd("~/School/4th Year/DS4002/Github/DS4002_Proj1")
title.basics4 = read.csv("titleBasics_Scripts.csv")
title.basics4 = read.csv("titleBasics_Scripts.csv")
#Filter out duplicate items
movieDupes = title.basics4$primaryTitle[duplicated(title.basics4$primaryTitle)]
#List of duplicate film titles for manual selection
tbsh = title.basics4[title.basics4$primaryTitle %in% movieDupes,]
#Checks number of duplicates to look through
test = tbsh[!duplicated(tbsh$primaryTitle),]
#Dataframe of movie and release date
#TODO manually change release date to correct date for duplicate title films
scriptKey = data.frame(title.basics4$primaryTitle,title.basics4$startYear)
scriptKey = scriptKey[!duplicated(scriptKey[,1]),]
title.basic.ratings = cbind(title.basics4, title.ratings)
title.ratings = read.delim('~/School/4th Year/DS4002/DS_Upload/title.ratings.tsv', sep = "\t", header = TRUE)
title.basic.ratings = cbind(title.basics4, title.ratings)
title.basic.ratings = cbind(title.basics4, title.ratings[(title.ratings$tconst %in% title.basics4$tconst),])
View(title.basics4)
View(title.basics4)
title.basics4 = read.csv("titleBasics_Scripts.csv")
title.basic.ratings = merge(title.basics4, title.ratings, by.x = "tconst", by.y = "tconst")
View(title.basic.ratings)
View(title.basic.ratings)
